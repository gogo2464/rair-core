var searchIndex = JSON.parse('{\
"rair_env":{"doc":"","i":[[3,"Environment","rair_env","",null,null],[4,"EnvData","","",null,null],[13,"Str","","",0,null],[13,"U64","","",0,null],[13,"I64","","",0,null],[13,"Bool","","",0,null],[13,"Color","","",0,null],[4,"EnvErr","","",null,null],[13,"NotFound","","",1,null],[13,"DifferentType","","",1,null],[13,"CbFailed","","",1,null],[13,"AlreadyExist","","",1,null],[11,"new","","",2,[[]]],[11,"add_str_with_cb","","",2,[[["strfn",6]],[["result",4],["enverr",4]]]],[11,"add_str","","",2,[[],[["result",4],["enverr",4]]]],[11,"get_str","","",2,[[],[["result",4],["enverr",4]]]],[11,"set_str","","",2,[[],[["result",4],["enverr",4]]]],[11,"is_str","","",2,[[]]],[11,"add_u64_with_cb","","",2,[[["u64fn",6]],[["result",4],["enverr",4]]]],[11,"add_u64","","",2,[[],[["result",4],["enverr",4]]]],[11,"get_u64","","",2,[[],[["result",4],["enverr",4]]]],[11,"set_u64","","",2,[[],[["result",4],["enverr",4]]]],[11,"is_u64","","",2,[[]]],[11,"add_i64_with_cb","","",2,[[["i64fn",6]],[["result",4],["enverr",4]]]],[11,"add_i64","","",2,[[],[["result",4],["enverr",4]]]],[11,"get_i64","","",2,[[],[["enverr",4],["result",4]]]],[11,"set_i64","","",2,[[],[["result",4],["enverr",4]]]],[11,"is_i64","","",2,[[]]],[11,"add_bool_with_cb","","",2,[[["boolfn",6]],[["result",4],["enverr",4]]]],[11,"add_bool","","",2,[[],[["result",4],["enverr",4]]]],[11,"get_bool","","",2,[[],[["result",4],["enverr",4]]]],[11,"set_bool","","",2,[[],[["result",4],["enverr",4]]]],[11,"is_bool","","",2,[[]]],[11,"add_color_with_cb","","",2,[[["colorfn",6]],[["result",4],["enverr",4]]]],[11,"add_color","","",2,[[],[["result",4],["enverr",4]]]],[11,"get_color","","",2,[[],[["enverr",4],["result",4]]]],[11,"set_color","","",2,[[],[["result",4],["enverr",4]]]],[11,"is_color","","",2,[[]]],[11,"reset","","",2,[[],[["result",4],["enverr",4]]]],[11,"get","","",2,[[],[["option",4],["envdata",4]]]],[11,"get_help","","",2,[[],["option",4]]],[11,"iter","","",2,[[],[["box",3],["iterator",8]]]],[6,"StrFn","","",null,null],[6,"U64Fn","","",null,null],[6,"I64Fn","","",null,null],[6,"BoolFn","","",null,null],[6,"ColorFn","","",null,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"default","","",2,[[],["environment",3]]],[11,"eq","","",0,[[["envdata",4]]]],[11,"ne","","",0,[[["envdata",4]]]],[11,"eq","","",1,[[["enverr",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[4,"EnvData"],[4,"EnvErr"],[3,"Environment"]]},\
"rair_io":{"doc":"Rair IO abstraction layer","i":[[3,"RIODesc","rair_io","This struct represents a file that is opened in [RIO]",null,null],[3,"RIO","","[RIO] is abstraction over IO, It allows you to open (more…",null,null],[3,"RIOMap","","This struct describes a mapping between physical address…",null,null],[12,"paddr","","physical address space",0,null],[12,"vaddr","","virtual address space",0,null],[12,"size","","size of the mapping",0,null],[3,"RIOPluginMetadata","","Metadata that describes the plugin",null,null],[12,"name","","Name of the plugin",1,null],[12,"desc","","Short description of the plugin",1,null],[12,"author","","Name of the author of the plugin",1,null],[12,"license","","License of the plugin",1,null],[12,"version","","Version of the plugin",1,null],[3,"RIOPluginDesc","","This class is populated via [RIOPlugin::open]",null,null],[12,"name","","URI to be opened",2,null],[12,"perm","","Permissions which is opened with",2,null],[12,"raddr","","real base physical address of the file",2,null],[12,"size","","Size of the file",2,null],[12,"plugin_operations","","object that implements read/write on the file",2,null],[3,"IoMode","","Set the mode for opening files.",null,null],[4,"IoError","","Errors resultion from operations on [RIO]",null,null],[13,"AddressNotFound","","Reading or writing to an invalid address.",3,null],[13,"AddressesOverlapError","","Memory addresses gets mapped in way that makes them overlap",3,null],[13,"IoPluginNotFoundError","","There is no sutiable IO plugin for loading the given file…",3,null],[13,"HndlNotFoundError","","Doing operationg on file handles that doesn\'t exist",3,null],[13,"TooManyFilesError","","Too many files are opened.",3,null],[13,"Custom","","Custom error message.",3,null],[13,"Parse","","Error that is originating from [std::io]",3,null],[11,"name","","Returns URI of current file descriptor.",4,[[]]],[11,"has_paddr","","Returns true if paddr exists in this file descriptor and…",4,[[]]],[11,"paddr_base","","Returns the base physical address of this file.",4,[[]]],[11,"size","","Returns size of file on disk.",4,[[]]],[11,"perm","","Returns the permissions which the file was opened with.",4,[[],["iomode",3]]],[11,"hndl","","Returns the Handle of given file descriptor.",4,[[]]],[11,"new","","Returns new Input/Output interface to be used",5,[[],["rio",3]]],[11,"load_plugin","","THIS FUNCTION IS NOT SUPPOSED TO BE THAT TRIVIAL I WANT IT…",5,[[["box",3],["rioplugin",8]]]],[11,"open","","Allows us to open file and have it accessable from out…",5,[[["iomode",3]],[["ioerror",4],["result",4]]]],[11,"open_at","","Allows us to open file and have it accessable from out…",5,[[["iomode",3]],[["ioerror",4],["result",4]]]],[11,"close","","Close an opened file, delete its physical and virtual…",5,[[],[["ioerror",4],["result",4]]]],[11,"close_all","","Close all open files, and reset all virtual and physical…",5,[[]]],[11,"pread","","Read from the physical address space of current [RIO]…",5,[[],[["ioerror",4],["result",4]]]],[11,"pread_sparce","","Read from the physical address space of current [RIO]…",5,[[],[["btreemap",3],["ioerror",4],["result",4]]]],[11,"pwrite","","Write into the physical address space of current [RIO]…",5,[[],[["ioerror",4],["result",4]]]],[11,"map","","Map memory regions from physical address space to virtual…",5,[[],[["ioerror",4],["result",4]]]],[11,"unmap","","unmap already mapped regions",5,[[],[["ioerror",4],["result",4]]]],[11,"vread","","read memory from virtual address space. If there is no…",5,[[],[["ioerror",4],["result",4]]]],[11,"vread_sparce","","read memory from virtual address space. Data is stored in…",5,[[],[["btreemap",3],["ioerror",4],["result",4]]]],[11,"vwrite","","write memory into virtual address space",5,[[],[["ioerror",4],["result",4]]]],[11,"vir_to_phy","","convert virtual address to physical address",5,[[],[["vec",3],["option",4]]]],[11,"phy_to_vir","","This funciton reverse-queries individual physical…",5,[[],["vec",3]]],[11,"uri_iter","","Iterate over open URIs",5,[[],[["box",3],["iterator",8]]]],[11,"map_iter","","Iterate over memory maps",5,[[],[["box",3],["iterator",8]]]],[11,"hndl_to_desc","","Return equivalent [RIODesc] structure for the given hndl",5,[[],[["riodesc",3],["option",4]]]],[18,"WRITE","","Open File in read mode.",6,null],[18,"READ","","Open file in write mode.",6,null],[18,"COW","","Open file in Copy-On-Write mode.",6,null],[11,"empty","","Returns an empty set of flags",6,[[],["iomode",3]]],[11,"all","","Returns the set containing all flags.",6,[[],["iomode",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",6,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",6,[[],[["iomode",3],["option",4]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",6,[[],["iomode",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",6,[[],["iomode",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",6,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",6,[[["iomode",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",6,[[["iomode",3]]]],[11,"insert","","Inserts the specified flags in-place.",6,[[["iomode",3]]]],[11,"remove","","Removes the specified flags in-place.",6,[[["iomode",3]]]],[11,"toggle","","Toggles the specified flags in-place.",6,[[["iomode",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",6,[[["iomode",3]]]],[8,"RIOPlugin","","This trait should be implemented by object that allows…",null,null],[10,"get_metadata","","Retrieve reference to the plugin metadata",7,[[],["riopluginmetadata",3]]],[10,"open","","Open a file given a uri (extension://file path) using the…",7,[[["iomode",3]],[["result",4],["rioplugindesc",3],["ioerror",4]]]],[10,"accept_uri","","Check if the given file can be opened wit the current…",7,[[]]],[8,"RIOPluginOperations","","A call to [RIOPlugin::open] would normally return…",null,null],[10,"read","","Function that read from a file represented by an object…",8,[[],[["ioerror",4],["result",4]]]],[10,"write","","Function that writes to a file represented by an object…",8,[[],[["ioerror",4],["result",4]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",3,[[["error",3]],["ioerror",4]]],[11,"extend","","",6,[[["intoiterator",8]]]],[11,"clone","","",0,[[],["riomap",3]]],[11,"clone","","",6,[[],["iomode",3]]],[11,"default","","",5,[[],["rio",3]]],[11,"default","","",6,[[],["iomode",3]]],[11,"cmp","","",6,[[["iomode",3]],["ordering",4]]],[11,"eq","","",0,[[["riomap",3]]]],[11,"ne","","",0,[[["riomap",3]]]],[11,"eq","","",0,[[["arc",3]]]],[11,"eq","","",1,[[["riopluginmetadata",3]]]],[11,"ne","","",1,[[["riopluginmetadata",3]]]],[11,"eq","","",6,[[["iomode",3]]]],[11,"ne","","",6,[[["iomode",3]]]],[11,"eq","","",3,[[["ioerror",4]]]],[11,"partial_cmp","","",6,[[["iomode",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["iomode",3]]]],[11,"le","","",6,[[["iomode",3]]]],[11,"gt","","",6,[[["iomode",3]]]],[11,"ge","","",6,[[["iomode",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"sub","","Returns the set difference of the two sets of flags.",6,[[["iomode",3]],["iomode",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",6,[[["iomode",3]]]],[11,"not","","Returns the complement of this set of flags.",6,[[],["iomode",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",6,[[["iomode",3]],["iomode",3]]],[11,"bitor","","Returns the union of the two sets of flags.",6,[[["iomode",3]],["iomode",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",6,[[["iomode",3]],["iomode",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",6,[[["iomode",3]]]],[11,"bitor_assign","","Adds the set of flags.",6,[[["iomode",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",6,[[["iomode",3]]]],[11,"hash","","",6,[[]]],[11,"from_iter","","",6,[[["intoiterator",8]],["iomode",3]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],[["rio",3],["result",4]]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]]],"p":[[3,"RIOMap"],[3,"RIOPluginMetadata"],[3,"RIOPluginDesc"],[4,"IoError"],[3,"RIODesc"],[3,"RIO"],[3,"IoMode"],[8,"RIOPlugin"],[8,"RIOPluginOperations"]]},\
"rcore":{"doc":"","i":[[3,"Commands","rcore","",null,null],[3,"Core","","",null,null],[12,"mode","","",0,null],[12,"io","","",0,null],[12,"stdout","","",0,null],[12,"stderr","","",0,null],[12,"env","","",0,null],[3,"CmdFunctions","","",null,null],[12,"run","","",1,null],[12,"help","","",1,null],[4,"AddrMode","","",null,null],[13,"Vir","","",2,null],[13,"Phy","","",2,null],[4,"Writer","","This union acts as thin abstraction layer over over input…",null,null],[5,"str_to_num","","",null,[[],[["parseinterror",3],["result",4]]]],[5,"expect","","",null,[[["core",3]]]],[5,"expect_range","","",null,[[["core",3]]]],[5,"error_msg","","",null,[[["core",3]]]],[5,"panic_msg","","",null,[[["core",3]]]],[5,"help","","",null,[[["core",3],["vec",3]]]],[5,"is_color","","",null,[[["environment",3]]]],[5,"register_io","","",null,[[["core",3]]]],[11,"add_command","","",3,[[["mrc",6],["cmd",8]]]],[11,"find","","",3,[[],[["option",4],["mrc",6]]]],[11,"suggest","","",3,[[],[["string",3],["vec",3]]]],[11,"prefix","","",3,[[],["vec",3]]],[11,"commands","","Returns list of all available commands in [Core].",0,[[],[["mutex",6],["arc",3]]]],[11,"set_commands","","",0,[[["mutex",6],["arc",3]]]],[11,"new","","",0,[[]]],[11,"new_no_colors","","",0,[[]]],[11,"set_loc","","",0,[[]]],[11,"get_loc","","",0,[[]]],[11,"add_command","","",0,[[["mrc",6],["cmd",8]]]],[11,"run","","",0,[[]]],[11,"run_at","","",0,[[]]],[11,"help","","",0,[[]]],[11,"new_write","","Creates a new [Writer] backed by object that implements…",4,[[["box",3],["write",8]]]],[11,"new_buf","","Returns a new buffer based [Writer].",4,[[]]],[11,"bytes","","This function consumes the [Writer] object, it returns the…",4,[[],[["option",4],["vec",3]]]],[11,"utf8_string","","This function consumes the [Writer] object, it returns…",4,[[],[["string",3],["option",4]]]],[11,"bytes_ref","","This function returns a reference to the data stored in…",4,[[],[["vec",3],["option",4]]]],[11,"bytes_mut","","This function returns a mutable reference to the data…",4,[[],[["vec",3],["option",4]]]],[6,"MRc","","",null,null],[8,"Cmd","","",null,null],[10,"run","","",5,[[["core",3]]]],[10,"help","","",5,[[["core",3]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"clone","","",2,[[],["addrmode",4]]],[11,"default","","",3,[[],["commands",3]]],[11,"default","","",0,[[]]],[11,"default","","",4,[[]]],[11,"eq","","",2,[[["addrmode",4]]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"write","","",4,[[],["result",6]]],[11,"flush","","",4,[[],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]]],"p":[[3,"Core"],[3,"CmdFunctions"],[4,"AddrMode"],[3,"Commands"],[4,"Writer"],[8,"Cmd"]]},\
"rtrees":{"doc":"various trees impelementation for rair project","i":[[0,"bktree","rtrees","Approximate String search data structure.",null,null],[3,"BKTree","rtrees::bktree","Generic BK-Tree Template used to store dictionary like…",null,null],[11,"new","","Returns a new BK-Tree",0,[[],["bktree",3]]],[11,"insert","","Inserts a new (key, value) pair into the KB-Tree",0,[[]]],[11,"find","","Search for the closest Item to key with a tolerance…",0,[[]]],[6,"SpellTree","","A BKTree with string based Key and distance trait…",null,null],[8,"Distance","","This trait used by [BKTree] to tell how close are 2…",null,null],[10,"distance","","Calculate the distance between two nodes in the [BKTree]",1,[[]]],[0,"ist","rtrees","Interval search tree implementation.",null,null],[3,"ISTIterator","rtrees::ist","Iterator for [IST]",null,null],[3,"ISTRefIterator","","Iterator for [IST] reference",null,null],[3,"IST","","Interval Query data type based on augmented binary search…",null,null],[11,"new","","Returns new Interval Search Tree # Example `use…",2,[[],["ist",3]]],[11,"size","","Returns the number of elements in the IST # Example ` use…",2,[[]]],[11,"get_level","","0 will be returned in case of empty IST. If IST has nodes,…",2,[[]]],[11,"insert","","Inserts an element into closed interval [ lo, hi ].…",2,[[]]],[11,"at","","Returns a vector of non mutable references of all values…",2,[[],["vec",3]]],[11,"at_mut","","Returns a vector of mutable references of all values…",2,[[],["vec",3]]],[11,"envelop","","Returns a vector of non mutable references of all values…",2,[[],["vec",3]]],[11,"envelop_mut","","Returns a vector of mutable references of all values that…",2,[[],["vec",3]]],[11,"inverse_envelop","","Returns a vector of non mutable references of all values…",2,[[],["vec",3]]],[11,"inverse_envelop_mut","","Returns a vector of non mutable references of all values…",2,[[],["vec",3]]],[11,"overlap","","Returns a vector of non mutable references of all values…",2,[[],["vec",3]]],[11,"overlap_mut","","Returns a vector of mutable references of all values that…",2,[[],["vec",3]]],[11,"delete_at","","Deletes all Intervals that that cover point. The returned…",2,[[],["vec",3]]],[11,"delete_envelop","","Deletes all Intervals that envelop the interval specified…",2,[[],["vec",3]]],[11,"delete_overlap","","Deletes all Intervals that overlap with the interval…",2,[[],["vec",3]]],[0,"rbtree","rtrees","Left-Leaning Red Black tree implementation built with…",null,null],[3,"TreeIterator","rtrees::rbtree","Iterator for [RBtree]",null,null],[3,"TreeRefIterator","","Iterator for [RBTree] reference",null,null],[3,"RBTree","","A left-leaning red–black (LLRB) Tree, optimized for…",null,null],[11,"is_node","","Return True if the current node is not null node.",3,[[]]],[11,"key","","Returns copy of key of the current Tree node # Panics…",3,[[]]],[11,"set_aug_data","","Changes the aug_data stored in the current Tree node. #…",3,[[]]],[11,"aug_data","","Returns aug_data stored in the current Tree node. # Panics…",3,[[]]],[11,"set_data","","Changes the data stored in the current Tree node. # Panics…",3,[[]]],[11,"data","","Returns data stored in the current Tree node. # Panics…",3,[[]]],[11,"mut_me","","Returns a tuple of tree elements: a mutable reference to…",3,[[],["leftrightdatatuple",6]]],[11,"data_ref","","Returns non-mutable reference to data stored in the…",3,[[]]],[11,"data_mut","","Returns mutable reference to data stored in the current…",3,[[]]],[11,"set_left","","Set the left subtree of the current Node. # Panics panics…",3,[[["rbtree",3]]]],[11,"left","","Returns the left subtree after ripping it from the current…",3,[[],["rbtree",3]]],[11,"left_ref","","Returns a non-mutable reference to left subtree. # Panics…",3,[[],["rbtree",3]]],[11,"left_mut","","Returns a mutable reference to left subtree. # Panics…",3,[[],["rbtree",3]]],[11,"set_right","","Set the right subtree of the current Node. # Panics panics…",3,[[["rbtree",3]]]],[11,"right","","Returns the right subtree after ripping it from the…",3,[[],["rbtree",3]]],[11,"right_ref","","Returns a non-mutable reference to right subtree. # Panics…",3,[[],["rbtree",3]]],[11,"right_mut","","Returns a mutable reference to right subtree. # Panics…",3,[[],["rbtree",3]]],[11,"new","","Returns new Red Black Tree # Example `use…",3,[[],["rbtree",3]]],[11,"size","","Returns the number of elements in the tree # Example `use…",3,[[]]],[11,"get_level","","0 will be returned in case of empty tree. If tree has…",3,[[]]],[11,"delete_min","","Deletes the minimum value in the tree and returns the data…",3,[[],["option",4]]],[11,"insert","","Inserts data associated with key into tree. insert does…",3,[[]]],[11,"force_sync_aug","","Force recalculating all agumented data from node matching…",3,[[]]],[11,"search","","Returns a non mutable references of the data stored at key…",3,[[],["option",4]]],[11,"search_mut","","Returns a mutable references of the data stored at key. We…",3,[[],["option",4]]],[11,"delete","","Deletes tree node represented by key. The return value is…",3,[[],["option",4]]],[6,"LeftRightDataTuple","","Tuple of 3 elements used with [RBTree::mut_me]. The first…",null,null],[8,"Augment","","Used to recalculate augmented data stored in each node.…",null,null],[11,"sync_custom_aug","","Recalculate the agumented data in the current node",4,[[]]],[11,"from","rtrees::bktree","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","rtrees::ist","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","rtrees::rbtree","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_iter","rtrees::ist","",2,[[],["istiterator",3]]],[11,"into_iter","rtrees::rbtree","",3,[[],["treeiterator",3]]],[11,"next","rtrees::ist","",5,[[],["option",4]]],[11,"next","","",6,[[],["option",4]]],[11,"next","rtrees::rbtree","",7,[[],["option",4]]],[11,"next","","",8,[[],["option",4]]],[11,"default","rtrees::bktree","",0,[[],["bktree",3]]],[11,"default","rtrees::ist","",2,[[]]],[11,"default","rtrees::rbtree","",3,[[],["rbtree",3]]],[11,"serialize","rtrees::ist","",2,[[],["result",4]]],[11,"serialize","rtrees::rbtree","",3,[[],["result",4]]],[11,"deserialize","rtrees::ist","",2,[[],["result",4]]],[11,"deserialize","rtrees::rbtree","",3,[[],["result",4]]],[11,"sync_custom_aug","","Recalculate the agumented data in the current node",4,[[]]]],"p":[[3,"BKTree"],[8,"Distance"],[3,"IST"],[3,"RBTree"],[8,"Augment"],[3,"ISTIterator"],[3,"ISTRefIterator"],[3,"TreeIterator"],[3,"TreeRefIterator"]]},\
"test_file":{"doc":"","i":[[5,"operate_on_file","test_file","",null,[[["fn",8]]]],[5,"operate_on_copy","","",null,[[["fn",8]]]],[5,"operate_on_files","","",null,[[["fn",8]]]],[17,"DATA","","",null,null]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);